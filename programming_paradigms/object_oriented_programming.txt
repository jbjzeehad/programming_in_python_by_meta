>> Python is object oriented, procedural,functional.

>> Object oriented Programming

-Reduce complexity
-Determine flow of execution
-easier to understand
-reusable
-abstraction

>> key points - Classes, Objects, Methods

    a.class (define with 'class' keyword)
    -attributes (can be variables)
    -behavior (can be functions)

    b.object
    -variables (attributes)
    -methods (behavior)

>> Inheritance : creating a new class which is derivative of an existing one. parent-child relation. An instance of taking attributes from a class is known as Inheritance.

class Parent:
    Members of the parent class

class Child(Parent):
    Inherited members from parent class
    Additional members of the child class

As the structure of inheritance gets more complicated, Python adheres to something called the Method Resolution Order (MRO) that determines the flow of execution. MRO is a set of rules, or an algorithm, that Python uses to implement monotonicity, which refers to the order or sequence in which the interpreter will look for the variables and functions to implement. This also helps in determining the scope of the different members of the given class.

>> Plymorphism : the ability of a function to change its behavior when called by different objects.
Polymorphism refers to something that can have many forms. In this case, a given object. Remember that everything in Python is inherently an object, so when I talk about polymorphism, it can be an operator, method or any object of some class. I can illustrate the case for polymorphism using built-in functions and operations.

string = "poly"
num = 7
sequence = [1,2,3]
new_str = string * 3
new_num = 7 * 3
new_sequence = sequence * 3

print(new_str, new_num, new_sequence)

#output: polypolypoly 21 [1, 2, 3, 1, 2, 3, 1, 2, 3]

In the example, I have used the same operator () to perform on a string, integer and a list. You can see the () operator behaves differently in all three cases.

string = "poly"
sequence = [1,2,3]
print(len(string))
print(len(sequence))

#output: 4 3

The len() function is able to take variable inputs. In the example above it is a string and a list that provides the output in integer format.

>> Encapsulation : Limit access to method and variable by encasing them in a single unit of scope.
The idea of encapsulation is to have methods and variables within the bounds of a given unit. In the case of Python, this unit is called a class. And the members of a class become locally bound to that class. These concepts are better understood with scope, such as global scope (which in simple terms is the files I am working with), and local scope (which refers to the method and variables that are 'local' to a class). Encapsulation thus helps in establishing these scopes to some extent.
Encapsulation is also used for hiding data and its internal representation. The term for this is information hiding.  Python has a way to deal with it, but it is better implemented in other programming languages such as Java and C++. Access modifiers represented by keywords such as public, private and protected are used for information hiding. The use of single and double underscores for this purpose in Python is a substitute for this practice.

class Alpha:
def __init__(self):
    self._a = 2.  # Protected member ‘a’
    self.__b = 2.  # Private member ‘b’

self._a is a protected member and can be accessed by the class and its subclasses.
Private members in Python are conventionally used with preceding double underscores: __. self.__b is a private member of the class Alpha and can only be accessed from within the class Alpha.

It should be noted that these private and protected members can still be accessed from outside of the class by using public methods to access them or by a practice known as name mangling. Name mangling is the use of two leading underscores and one trailing underscore.

_class__identifier

Class is the name of the class and identifier is the data member that I want to access.


>> Abstraction : Hide implementation details for data security.Abstraction can be seen both as a means for hiding important information as well as unnecessary information in a block of code. The core of abstraction in Python is the implementation of something called abstract classes and methods, which can be implemented by inheriting from something called the abc module. "abc" here stands for abstract base class. It is first imported and then used as a parent class for some class that becomes an abstract class. Its simplest implementation can be done as below.

from abc import ABC,   
class ClassName(ABC):
    pass

also some oop concepts like methid overloading,overriding,constructors etc.


>> Python classes and instances : 

attributes refer to variables declared in a class.behaviors associated with the methods in a class. Everything in python is an object or derived from the object class. 

The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

>> Inheritance :

Class A:
    pass
Class B(A):
    pass

If class A is the parent class and class B is inheriting from it, then class A is passed inside class B as a parameter. This will allow class B to directly access the attributes and methods inside class A.

You have learned about single inheritance so far, but Python also gives us the ability to perform multiple inheritance between classes.

# Example 1
class A:
   a = 1
   
class B:
   b = 2
   
class C(A, B):
   pass

c = C()
print(c.a, c.b) #output : 1 2

First, two classes called A and B are created and then variables a and b respectively are initialized with values. A new class C is then defined and classes A and B are passed to it. This is how multiple inheritance is done in Python. The order of classes is important, but not in this specific example. I then instantiate an object ‘c’ of class C. The values of the a and b variables are printed over the object c of class C even though a and b are not present inside class C.

>> Multi-level Inheritance :

class A:
   a = 1

class B(A):
   a = 2

class C(B):
   pass

c = C()
print(c.a) #output : 2

The case above is an example of multi-level inheritance where the derived class C inherits from base class B. The class B is in turn a derived class of base class C. Class B here is an intermediary derived class. There are three levels of inheritance in this case, but it could be extended as long as I want, though it may become impractical after a while.

>> Built in function :

There are two built-in functions that can come in handy when trying to find the relationship between different classes and objects: issubclass() and isinstance()

issubclass(class A, class B)

Two classes are passed as arguments to this function and a Boolean result is returned. The above example can be extended as follows. 

print(issubclass(A,B)) #output: False
print(issubclass(B,A)) #output: True

This illustrates how the child class is passed as the first argument. To avoid confusion, this can be read as: “Is B subclass of A?“ You can see the result is "True" in the second case where child B is the subclass.

Another built-in function similar to this one is isinstance() thatdetermines if some object is an instance of some class.

Class A:
	pass
Class B(A):
	pass

b = B()
print(isinstance(b,B))
print(isinstance(b,B)) #output: True

Now that you know how classes can be extended from other classes, let's look at another useful built-in function called the super() function.

The super() function is a built-in function that can be called inside the derived class and gives access to the methods and variables of the parent classes or sibling classes. Sibling classes are the classes that share the same parent class. When you call the super() function, you get an object that represents the parent class in return.

The super() function plays an important role in multiple inheritance and helps drive the flow of the code execution. It helps in managing or determining the control of from where I can draw the values of my desired functions and variables.

If you change anything inside the parent class, there is a direct retrieval of changes inside the derived class. This is mainly used in places where you need to initialize the functionalities present inside the parent class in the child class as well. You can then add additional code in the child class.

class Fruit():
    def __init__(self, fruit):
        print('Fruit type: ', fruit)

class FruitFlavour(Fruit):
    def __init__(self):
        super().__init__('Apple')
        print('Apple is sweet')

apple = FruitFlavour()


# Output : 

Fruit type:  Apple
Apple is sweet

In the code above, if I had commented out the line for super() function, the output is: 

Apple is sweet

This happened because when you initialize the child class, you don’t initialize the base class with it. super() function helps you to achieve this and add the initialization of base class with the derived class.