 >> Declare functions in python 
    Pass data in functions
    Return data from functions

def sum(x,y):
    return x+y

A function is a modular piece of code that can be used repeatedly.

>> Built in Scope
        Global Scope
            Enclosing Scope
                Local Scope

Enclosed variables can be accessed locally.

>> Function and variable scope : It is essential to understand the levels of scope in Python and how things can be accessed from the four different scope levels
    1. Local Scope : Local scope refers to a variable declared inside a function.

def get_total(a, b):
    #local variable declared inside a function
    total = a + b;
    return total

print(get_total(5, 2))
7

# Accessing variable outside of the function:
print(total)
NameError: name 'total' is not defined

    2. Enclosing scope : Enclosing scope refers to a function inside another function or what is commonly called a nested function.

def get_total(a, b):
    #enclosed variable declared inside a function
    total = a + b

    def double_it():
        #local variable
        double = total * 2
        print(double)

    double_it()
    #double variable will not be accessible
    print(double)

    return total

    3. Global scope : Global scope is when a variable is declared outside of a function. This means it can be accessed from anywhere.


special = 5

def get_total(a, b):
    #enclosed scope variable declared inside a function
    total = a + b
    print(special)

    def double_it():
        #local variable
        double = total * 2
        print(special)

    double_it()

    return total

    4. Built in scope : Built-in scope refers to the reserved keywords that Python uses for its built-in functions, such as print, def, for, in, and so forth.  Functions with built-in scope can be accessed at any level.

>> Data Structures : 
    1. Built in: List, tuple, Dictionary, set
    2. User defined: Stack, Tree, Queue, Graph, Linked List, HashMap

A data structure allows you to organize and arrange your data to perform operations on them. Python has the following built-in data structures: List, dictionary, tuple and set. These are all considered non-primitive data structures, meaning they are classed as objects.Along with the built-in data structures, Python allows users to create their own. Data structures such as Stacks, Queues and Trees can all be created by the user.
Each data structure can be designed to solve a particular problem or optimize a current solution to make it much more performant

>> Mutability and Immutability : 

Data Structures can be mutable or immutable.Mutability refers to data inside the data structure that can be modified. means we an either change, update, or delete the data when needed. exm: List

The opposite of mutable is immutable. An immutable data structure will not allow modification once the data has been set. exm: Tuple

>> The append function appends a single item without having to specify the index.The insert function is used to insert an item within an existing list at a specified index.
A tuple can accept any mix of data types.
Sets do not accept duplicate values. set is not a sequence.
Each item in the dictionary is a value within a key-value pairing.
You can use kwargs to pass keyword arguments.
You can use kwargs to pass in non-keyword variables.

>> Which data structure to choose ?
- The tricky part for new developers is understanding which data structure is suited to the required solution. Each data structure offers a different approach to storing, accessing and updating the information stored inside it. There can be many factors to select from, including size, speed and performance. The best way to try and understand which one is more suitable is through an example.
Example: Employees list
In this example, there's a list of employees that work in a restaurant. You need to be able to find an employee by their employee ID - an integer-based numeric ID. The function get_employee contains a for loop to iterate over the list of employees and returns an employee object if the ID matches.

employee_list = [(12345, "John", "Kitchen"), (12458, "Paul", "House Floor")]

def get_employee(id):
    for employee in employee_list:
        if employee[0] == id:
            return {"id": employee[0], "name": employee[1], "department": employee[2]}

print(get_employee(12458))

In this code, employee_list is a list of tuples. The code runs well and will return the user Paul, as its ID, 12458, is matched. The challenge comes when the list gets bigger. 

Instead of two employees, you may have 2000 or even 20,000. The code will have to iterate over the list sequentially until the number is matched. 

You could optimize the code to split the search, but even with this, it still lacks in performance in comparison to other data structures, such as the dictionary.

employee_dict = {
    12345: {
        "id": "12345",
        "name": "John", 
        "department": "Kitchen"    
    },
    12458: {
        "id": "12458",
        "name": "Paul", 
        "department": "House Floor"    
    }
}

def get_employee_from_dict(id):
    return employee_dict[id];


print(get_employee_from_dict(12458));

Notice how, in this code block, if you change the data structure to use a dictionary, it will allow you to find the employee. The main difference is that you no longer need to iterate over the list to locate them. If the list expands to a much larger size, the seek time to find the employee stays the same. 

This is a prime example of how to choose the right data structure to suit the solution. 

Both work well, but the trade-off to be considered is that of time and scale. The first solution will work well for smaller amounts of data, but loses performance as the data scales. 

The second solution is better suited to large amounts of data as its structure allows for a constant seek time allowing large amounts of data to be accessed at a constant rate.

This example shows that there is no one size fits all solution and careful consideration should be given to the choice of data structure to be used depending on the constraints of the solution.

